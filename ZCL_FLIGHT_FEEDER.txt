class ZCL_FLIGHT_FEEDER definition
  public
  create public .

public section.

  interfaces ZIF_ALV_REPORT_FEEDER .

  types:
    TY_FLIGHTS_TAB type standard table of sflight .
protected section.
private section.

  data MR_T_DATA type ref to DATA .
ENDCLASS.



CLASS ZCL_FLIGHT_FEEDER IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_FLIGHT_FEEDER->ZIF_ALV_REPORT_FEEDER~GET_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_SELECTION_PARAMS            TYPE        TY_SELECTION_PARAM_TAB
* | [<-->] CT_DATA                        TYPE        DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ZIF_ALV_REPORT_FEEDER~GET_DATA.
    "Method-Local Data Declarations:
    DATA: BEGIN OF ls_search,
            carrid TYPE RANGE OF sflight-carrid,
            connid TYPE RANGE OF sflight-connid,
            fldate TYPE RANGE OF sflight-fldate,
          END OF ls_search.
    FIELD-SYMBOLS <ls_param> LIKE LINE OF it_selection_params.
    FIELD-SYMBOLS <ls_temp> TYPE any.

    TYPES ty_flights_tab TYPE STANDARD TABLE OF sflight.
    FIELD-SYMBOLS <lt_data> TYPE ty_flights_tab.

    "Initialization:
    GET REFERENCE OF ct_data INTO me->mr_t_data.
    ASSIGN me->mr_t_data->* TO <lt_data>.

    "Parse selection parameters into range tables:
    LOOP AT it_selection_params ASSIGNING <ls_param>.
      CASE <ls_param>-attribute_name.
        WHEN 'S_CARRID'.
          APPEND INITIAL LINE TO ls_search-carrid ASSIGNING <ls_temp>.
          MOVE-CORRESPONDING <ls_param> TO <ls_temp>.
        WHEN 'S_CONNID'.
          APPEND INITIAL LINE TO ls_search-connid ASSIGNING <ls_temp>.
          MOVE-CORRESPONDING <ls_param> TO <ls_temp>.
        WHEN 'S_FLDATE'.
          APPEND INITIAL LINE TO ls_search-fldate ASSIGNING <ls_temp>.
          MOVE-CORRESPONDING <ls_param> TO <ls_temp>.
      ENDCASE.
    ENDLOOP.

    "Search the flights database:
    SELECT *
      INTO TABLE <lt_data>
      FROM sflight
     WHERE carrid IN ls_search-carrid
       AND connid IN ls_search-connid
       AND fldate IN ls_search-fldate.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_FLIGHT_FEEDER->ZIF_ALV_REPORT_FEEDER~GET_DEFINITION
* +-------------------------------------------------------------------------------------------------+
* | [<---] EO_FIELD_CATALOG               TYPE REF TO CL_ABAP_TABLEDESCR
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ZIF_ALV_REPORT_FEEDER~GET_DEFINITION.
    DATA lt_flights TYPE zcl_flight_feeder=>ty_flights_tab.
    eo_field_catalog ?= cl_abap_tabledescr=>describe_by_data( lt_flights ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_FLIGHT_FEEDER->ZIF_ALV_REPORT_FEEDER~INITIALIZE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_REPORT_PROGRAM              TYPE        CSEQUENCE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ZIF_ALV_REPORT_FEEDER~INITIALIZE.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_FLIGHT_FEEDER->ZIF_ALV_REPORT_FEEDER~PROCESS_BEFORE_OUTPUT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_SORTS                       TYPE REF TO CL_SALV_SORTS
* | [--->] IO_SELECTIONS                  TYPE REF TO CL_SALV_SELECTIONS
* | [--->] IO_AGGREGATIONS                TYPE REF TO CL_SALV_AGGREGATIONS
* | [--->] IO_FILTERS                     TYPE REF TO CL_SALV_FILTERS
* | [--->] IO_COLUMNS                     TYPE REF TO CL_SALV_COLUMNS_TABLE
* | [--->] IO_LAYOUT                      TYPE REF TO CL_SALV_LAYOUT
* | [--->] IO_DISPLAY_SETTINGS            TYPE REF TO CL_SALV_DISPLAY_SETTINGS
* | [--->] IO_FUNCTIONAL_SETTINGS         TYPE REF TO CL_SALV_FUNCTIONAL_SETTINGS
* | [--->] IO_FUNCTIONS                   TYPE REF TO CL_SALV_FUNCTIONS_LIST
* | [--->] IO_PRINT                       TYPE REF TO CL_SALV_PRINT
* | [--->] IO_TOP_OF_LIST                 TYPE REF TO CL_SALV_FORM_ELEMENT
* | [--->] IO_TOP_OF_LIST_PRINT           TYPE REF TO CL_SALV_FORM_ELEMENT
* | [--->] IO_END_OF_LIST                 TYPE REF TO CL_SALV_FORM_ELEMENT
* | [--->] IO_END_OF_LIST_PRINT           TYPE REF TO CL_SALV_FORM_ELEMENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ZIF_ALV_REPORT_FEEDER~PROCESS_BEFORE_OUTPUT.
    "Sort by flight date in descending order:
    io_sorts->add_sort( columnname = 'FLDATE'
                        sequence = IF_SALV_C_SORT=>SORT_DOWN ).
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_FLIGHT_FEEDER->ZIF_ALV_REPORT_FEEDER~PROCESS_EVENT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_EVENT                       TYPE REF TO ZCL_ALV_TABLE_EVENT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ZIF_ALV_REPORT_FEEDER~PROCESS_EVENT.
    "Method-Local Data Declarations:
    FIELD-SYMBOLS <lt_data> TYPE ty_flights_tab.
    FIELD-SYMBOLS <ls_data> TYPE sflight.
    DATA lv_row TYPE sy-tabix.

    CASE io_event->mv_event_id.
      WHEN zcl_alv_table_event=>co_event_type-double_click.
        "Read the selected flight record:
        IF me->mr_t_data IS BOUND.
          ASSIGN me->mr_t_data->* TO <lt_data>.
          io_event->get_event_parameters( )->get_value(
            EXPORTING
              iv_key = 'ROW'
            IMPORTING
              ev_value = lv_row ).

          READ TABLE <lt_data> INDEX lv_row ASSIGNING <ls_data>.
          IF sy-subrc NE 0.
            RETURN.
          ENDIF.
        ELSE.
          RETURN.
        ENDIF.

        "Open up a transaction to create a flight booking:
        SET PARAMETER ID 'CAR' FIELD <ls_data>-carrid.
        SET PARAMETER ID 'CON' FIELD <ls_data>-connid.
        SET PARAMETER ID 'DAY' FIELD <ls_data>-fldate.

        CALL TRANSACTION 'BC_GLOBAL_SBOOK_CREA'.
    ENDCASE.
  endmethod.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_FLIGHT_FEEDER->ZIF_ALV_REPORT_FEEDER~SET_ALV_TABLE_REF
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_TABLE                       TYPE REF TO CL_SALV_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  method ZIF_ALV_REPORT_FEEDER~SET_ALV_TABLE_REF.
  endmethod.
ENDCLASS.