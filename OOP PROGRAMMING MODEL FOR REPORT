*&---------------------------------------------------------------------*
*& Report ZDEMO_USINGOOMETHODSFORREPORT
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZDEMO_USINGOOMETHODSFORREPORT.

DATA : LV_VBELN TYPE VBAP-VBELN .

SELECTION-SCREEN BEGIN OF BLOCK B1 WITH FRAME TITLE TEXT-000.
PARAMETERS     : P_WERKS TYPE VBAP-WERKS .
SELECT-OPTIONS : S_VBELN1 FOR LV_VBELN .
SELECTION-SCREEN END OF BLOCK B1.

SELECTION-SCREEN BEGIN OF BLOCK B2 WITH FRAME TITLE TEXT-001.
PARAMETERS: P_VARI LIKE DISVARIANT-VARIANT.
SELECTION-SCREEN END OF BLOCK B2.

CLASS CL_VARIANT DEFINITION FINAL.
PUBLIC SECTION.
TYPES : P_VARI1 TYPE DISVARIANT-VARIANT.
DATA  : G_LAYOUT TYPE DISVARIANT-VARIANT .
TYPES : G_REPID TYPE SY-REPID .
METHODS:  F4_VARIANT CHANGING  CV_LAYOUT TYPE DISVARIANT-VARIANT.
CLASS-METHODS:  GET_DEFAULT CHANGING CV_LAYOUT TYPE DISVARIANT-VARIANT .
ENDCLASS .
*&---------------------------------------------------------------------*
*&       Class (Implementation)  VARIANT
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS CL_VARIANT IMPLEMENTATION.
METHOD F4_VARIANT.
DATA: LS_LAYOUT TYPE SALV_S_LAYOUT_INFO,
LS_KEY    TYPE SALV_S_LAYOUT_KEY.

LS_KEY-REPORT = SY-REPID.
LS_LAYOUT = CL_SALV_LAYOUT_SERVICE=>F4_LAYOUTS(
S_KEY    = LS_KEY
RESTRICT = IF_SALV_C_LAYOUT=>RESTRICT_NONE  ).
CV_LAYOUT = LS_LAYOUT-LAYOUT.
G_LAYOUT  =  CV_LAYOUT.
ENDMETHOD.
METHOD GET_DEFAULT .
DATA: LS_LAYOUT TYPE SALV_S_LAYOUT_INFO,
LS_KEY    TYPE SALV_S_LAYOUT_KEY.
LS_KEY-REPORT = SY-REPID.
LS_LAYOUT = CL_SALV_LAYOUT_SERVICE=>GET_DEFAULT_LAYOUT(
S_KEY    = LS_KEY
RESTRICT = IF_SALV_C_LAYOUT=>RESTRICT_NONE  ).
CV_LAYOUT = LS_LAYOUT-LAYOUT.
ENDMETHOD .
ENDCLASS.               "VARIANT
************************************SEL CLASS FOR SELECTING FIELDS*********************************
CLASS CL_SEL DEFINITION FINAL .
PUBLIC SECTION .
TYPES : T_VBELN  TYPE RANGE OF VBELN .
DATA : S_VBELN TYPE T_VBELN .
DATA : S_WERKS TYPE WERKS_EXT  .
METHODS : CHECK_PLANT IMPORTING LP_WERKS TYPE WERKS_EXT .
ENDCLASS .
*&---------------------------------------------------------------------*
*&       CLASS (IMPLEMENTATION)  SEL
*&---------------------------------------------------------------------*
*        TEXT
*----------------------------------------------------------------------*
CLASS CL_SEL IMPLEMENTATION.
METHOD CHECK_PLANT .
IF LP_WERKS IS NOT INITIAL .
SELECT COUNT(*) UP TO 1 ROWS
FROM T001W
WHERE WERKS = LP_WERKS.
IF SY-SUBRC NE 0.
MESSAGE 'PLEASE ENTER A VALID WERKS' TYPE 'E'.
ENDIF.
ENDIF .
ENDMETHOD.
ENDCLASS.               "SEL

****************************FETCH CLASS FOR DATA FETCH******************************
CLASS CL_FETCH DEFINITION  .
PUBLIC SECTION .
TYPES : BEGIN OF TY_FINAL,
VBELN   TYPE VBELN_VA,
POSNR   TYPE POSNR_VA,
VKORG   TYPE VKORG,
SPART   TYPE SPART,
VKGRP   TYPE VKGRP,
MATNR   TYPE MATNR,
ARKTX   TYPE ARKTX,
PSTYV   TYPE PSTYV,
SP_NAME TYPE AD_NAME1,
SH_NAME TYPE AD_NAME1,
END OF TY_FINAL .
TYPES : BEGIN OF TY_VBAK,
VBELN TYPE VBELN_VA,
VKORG TYPE VKORG,
SPART TYPE SPART,
VKGRP TYPE VKGRP,
END OF TY_VBAK.
TYPES : BEGIN OF TY_VBPA,
VBELN TYPE VBELN_VA,
POSNR TYPE POSNR_VA,
PARVW TYPE PARVW,
KUNNR TYPE KUNNR,
ADRNR TYPE ADRNR,
END OF TY_VBPA .
TYPES : BEGIN OF TY_ADRC,
ADDRNUMBER TYPE AD_ADDRNUM,
NAME1      TYPE AD_NAME1,
END OF TY_ADRC .
DATA : IT_FINAL TYPE STANDARD TABLE OF TY_FINAL.
DATA : WA_FINAL TYPE TY_FINAL .

DATA : IT_VBAK TYPE STANDARD TABLE OF TY_VBAK,
WA_VBAK TYPE TY_VBAK.

DATA : IT_VBPA TYPE STANDARD TABLE OF TY_VBPA,
WA_VBPA TYPE TY_VBPA.

DATA : IT_ADRC TYPE STANDARD TABLE OF TY_ADRC,
WA_ADRC TYPE TY_ADRC.

DATA : IT_VBAP     TYPE STANDARD TABLE OF VBAP,
IT_VBAP_TEM TYPE STANDARD TABLE OF VBAP,
WA_VBAP     TYPE  VBAP.

DATA : SEL_OBJ TYPE REF TO CL_SEL .
METHODS : CONSTRUCTOR IMPORTING REF_SEL TYPE REF TO CL_SEL .
METHODS : FETCH_DATA .
METHODS : ARRANGE_DATA .
ENDCLASS .
*&---------------------------------------------------------------------*
*&       CLASS (IMPLEMENTATION)  FETCH
*&---------------------------------------------------------------------*
*        TEXT
*----------------------------------------------------------------------*
CLASS CL_FETCH IMPLEMENTATION.
METHOD CONSTRUCTOR.
ME->SEL_OBJ = REF_SEL .
ENDMETHOD .
METHOD FETCH_DATA .
SELECT * FROM VBAP INTO TABLE ME->IT_VBAP UP TO 100 ROWS WHERE
VBELN IN ME->SEL_OBJ->S_VBELN AND WERKS EQ ME->SEL_OBJ->S_WERKS .

ME->IT_VBAP_TEM = ME->IT_VBAP.
DELETE ADJACENT DUPLICATES FROM  ME->IT_VBAP_TEM COMPARING VBELN.
SORT ME->IT_VBAP_TEM BY VBELN POSNR .
IF ME->IT_VBAP_TEM IS NOT INITIAL .
SELECT VBELN
VKORG
SPART
VKGRP FROM VBAK INTO TABLE ME->IT_VBAK
FOR ALL ENTRIES IN  ME->IT_VBAP_TEM
WHERE VBELN = ME->IT_VBAP_TEM-VBELN .

SELECT VBELN
POSNR
PARVW
KUNNR
ADRNR
FROM VBPA INTO TABLE ME->IT_VBPA
FOR ALL ENTRIES IN ME->IT_VBAP_TEM
WHERE VBELN = ME->IT_VBAP_TEM-VBELN AND PARVW IN ('AG','WE').

SELECT ADDRNUMBER NAME1 FROM ADRC INTO TABLE ME->IT_ADRC
FOR ALL ENTRIES IN ME->IT_VBPA
WHERE ADDRNUMBER = ME->IT_VBPA-ADRNR .
ENDIF.

ENDMETHOD .

METHOD ARRANGE_DATA.
CALL METHOD ME->FETCH_DATA( ).
LOOP AT ME->IT_VBAP INTO ME->WA_VBAP.
ME->WA_FINAL-VBELN = ME->WA_VBAP-VBELN.
ME->WA_FINAL-POSNR = ME->WA_VBAP-POSNR .
ME->WA_FINAL-MATNR = ME->WA_VBAP-MATNR .
ME->WA_FINAL-ARKTX = ME->WA_VBAP-ARKTX .
ME->WA_FINAL-PSTYV = ME->WA_VBAP-PSTYV .

READ TABLE ME->IT_VBAK INTO ME->WA_VBAK WITH KEY
VBELN = ME->WA_VBAP-VBELN .
IF SY-SUBRC EQ 0.
ME->WA_FINAL-VKORG = ME->WA_VBAK-VKORG .
ME->WA_FINAL-SPART = ME->WA_VBAK-SPART .
ME->WA_FINAL-VKGRP = ME->WA_VBAK-VKGRP .
ENDIF .

READ TABLE ME->IT_VBPA INTO ME->WA_VBPA WITH KEY
VBELN = ME->WA_VBAP-VBELN  PARVW = 'AG'.
IF SY-SUBRC EQ 0.
READ TABLE ME->IT_ADRC INTO ME->WA_ADRC WITH KEY
ADDRNUMBER = ME->WA_VBPA-ADRNR .
ME->WA_FINAL-SP_NAME = ME->WA_ADRC-NAME1 .
ENDIF.

READ TABLE ME->IT_VBPA INTO ME->WA_VBPA WITH KEY
VBELN = ME->WA_VBAP-VBELN  PARVW = 'WE'.
IF SY-SUBRC EQ 0.
READ TABLE ME->IT_ADRC INTO ME->WA_ADRC WITH KEY
ADDRNUMBER = ME->WA_VBPA-ADRNR .
ME->WA_FINAL-SH_NAME = ME->WA_ADRC-NAME1 .
ENDIF.
APPEND ME->WA_FINAL TO ME->IT_FINAL .
ENDLOOP.
ENDMETHOD .
ENDCLASS.               "FETCH

*******************************DISPLAY DATA ******************************
CLASS CL_ALV DEFINITION .
PUBLIC SECTION .
DATA : FETCH_OBJ  TYPE REF TO CL_FETCH .
DATA : VARIANT_OBJ TYPE REF TO CL_VARIANT .
DATA : O_ALV TYPE REF TO CL_SALV_TABLE.
METHODS : CONSTRUCTOR IMPORTING REF_FETCH TYPE REF TO CL_FETCH
REF_VAR   TYPE REF TO CL_VARIANT.
METHODS : GET_OBJECT .
METHODS : LAYOUT_DIS .
METHODS : DISPLAY_ALV .

ENDCLASS .
*&---------------------------------------------------------------------*
*&       Class (Implementation)  CL_ALV
*&---------------------------------------------------------------------*
*        Text
*----------------------------------------------------------------------*
CLASS CL_ALV IMPLEMENTATION.
METHOD CONSTRUCTOR .
ME->FETCH_OBJ = REF_FETCH .
ME->VARIANT_OBJ = REF_VAR.
ENDMETHOD .
METHOD GET_OBJECT .
DATA: LX_MSG TYPE REF TO CX_SALV_MSG.
TRY.
CL_SALV_TABLE=>FACTORY(
IMPORTING
R_SALV_TABLE = ME->O_ALV
CHANGING
T_TABLE      = ME->FETCH_OBJ->IT_FINAL ).
CATCH CX_SALV_MSG INTO LX_MSG.
ENDTRY.
ENDMETHOD .
METHOD LAYOUT_DIS.
DATA : LS_KEY    TYPE SALV_S_LAYOUT_KEY,
LO_LAYOUT TYPE REF TO CL_SALV_LAYOUT.
DATA: LO_FUNCTIONS TYPE REF TO CL_SALV_FUNCTIONS_LIST.
LS_KEY-REPORT = SY-REPID .
*  GET DEFAULT TOOLBAR ICONS
LO_FUNCTIONS = ME->O_ALV->GET_FUNCTIONS( ).
LO_FUNCTIONS->SET_DEFAULT( ABAP_TRUE ).
* GET LAYOUT OBUJECT
LO_LAYOUT = ME->O_ALV->GET_LAYOUT( ).
* ALLOW SAVING LAYOUT
LO_LAYOUT->SET_SAVE_RESTRICTION( IF_SALV_C_LAYOUT=>RESTRICT_NONE ).
LO_LAYOUT->SET_KEY( LS_KEY ).
* Allow default layout check box
LO_LAYOUT->SET_DEFAULT( ABAP_TRUE ).
*setting the layout from my class CL_VARIANT
IF ME->VARIANT_OBJ->G_LAYOUT IS NOT INITIAL .
LO_LAYOUT->SET_INITIAL_LAYOUT( ME->VARIANT_OBJ->G_LAYOUT  ) .
ENDIF .

ENDMETHOD .
METHOD DISPLAY_ALV .
*    DATA: lx_msg TYPE REF TO cx_salv_msg.
*    TRY.
*        cl_salv_table=>factory(
*          IMPORTING
*            r_salv_table = me->o_alv
*          CHANGING
*            t_table      = ME->FETCH_OBJ->IT_VBAP ).
*      CATCH cx_salv_msg INTO lx_msg.
*    ENDTRY.
CALL METHOD ME->GET_OBJECT( ) .
CALL METHOD ME->LAYOUT_DIS( ) .
ME->O_ALV->DISPLAY( ).

ENDMETHOD.

ENDCLASS.               "CL_ALV

DATA: O_SEL     TYPE REF TO CL_SEL,
O_VAR     TYPE REF TO CL_VARIANT,
O_FETCH   TYPE REF TO CL_FETCH,
O_DISPLAY TYPE REF TO CL_ALV.

INITIALIZATION .
CREATE OBJECT : O_SEL,
O_VAR,
O_FETCH EXPORTING REF_SEL = O_SEL  ,
O_DISPLAY EXPORTING REF_FETCH = O_FETCH  REF_VAR = O_VAR .
CL_VARIANT=>GET_DEFAULT( CHANGING CV_LAYOUT = P_VARI ).

AT SELECTION-SCREEN .
O_SEL->CHECK_PLANT( P_WERKS ).

AT SELECTION-SCREEN ON VALUE-REQUEST FOR P_VARI.
O_VAR->F4_VARIANT( CHANGING CV_LAYOUT = P_VARI ).

START-OF-SELECTION .
O_SEL->S_WERKS = P_WERKS .
O_SEL->S_VBELN = S_VBELN1[] .
.
*  O_FETCH->FETCH_DATA( ).
O_FETCH->ARRANGE_DATA( ) .

END-OF-SELECTION .
O_DISPLAY->DISPLAY_ALV( ).
